name: "Release"
on:
  release:
    types: [published]
env:
  GIT_USER_NAME: 'jdaugherty'
  GIT_USER_EMAIL: 'jdaugherty@users.noreply.github.com'
jobs:
  publish:
    permissions:
      contents: write  #  to create release
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      target_branch: ${{ steps.extract_branch.outputs.value }}
    steps:
      - name: "📥 Checkout the repository"
        uses: actions/checkout@v4
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '17'
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
      - name: "📝 Store the target branch"
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=${GITHUB_REF#refs/heads/}
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
      - name: "📝Set the current release version"
        id: release_version
        run: echo "value=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
      - name: "⚙️ Set release in gradle.properties & tag"
        run: |
          # Setup Git Repo
          git config --global --add safe.directory /github/workspace
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"
          git fetch
          export target_branch='${{ steps.extract_branch.outputs.value }}'
          echo "Using Target Branch: ${target_branch}"
          git checkout $target_branch
          # Set the release version in gradle.properties
          export release_version='${{ steps.release_version.outputs.value }}'
          echo "Setting release version to '${release_version}' in gradle.properties"
          sed -i "s/^projectVersion.*$/projectVersion\=${release_version}/" gradle.properties
          cat gradle.properties
          # Commit the release version change
          echo "Pushing release version and recreating v${release_version} tag"
          git add gradle.properties
          git commit -m "[skip ci] Release v${release_version}"
          git push origin $target_branch
          git tag -fa v${release_version} -m "Release v${release_version}"
          # Ensure the tag contains the release version
          git push origin v${release_version} --force
          echo "Closing again the release after updating the tag"
          export release_url=`cat $GITHUB_EVENT_PATH | jq '.release.url' | sed -e 's/^"\(.*\)"$/\1/g'`
          echo $release_url
          curl -s --request PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" $release_url --data "{\"draft\": false}"
      - name: "🧩 Run Assemble"
        if: success()
        id: assemble
        run: ./gradlew assemble
      - name: "🔐 Generate secring file"
        env:
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: echo $SECRING_FILE | base64 -d > ${{ github.workspace }}/secring.gpg
      - name: "🚀 Publish to Sonatype OSSRH"
        id: publish
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_PUBLISH_USERNAME }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_PUBLISH_PASSWORD }}
          NEXUS_PUBLISH_URL: ${{ secrets.NEXUS_PUBLISH_URL }}
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.NEXUS_PUBLISH_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
          GRAILS_PUBLISH_RELEASE: "true"
        run: >
          ../gradlew
          -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg 
          publishToSonatype 
          closeSonatypeStagingRepository
  release:
    environment: production
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
      - name: "🏆Nexus Staging Close And Release"
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_PUBLISH_USERNAME }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_PUBLISH_PASSWORD }}
          NEXUS_PUBLISH_URL: ${{ secrets.NEXUS_PUBLISH_URL }}
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.NEXUS_PUBLISH_STAGING_PROFILE_ID }}
          GRAILS_PUBLISH_RELEASE: "true"
        run: >
          ../gradlew
          findSonatypeStagingRepository
          releaseSonatypeStagingRepository
      - name: "⚙️Back to snapshot"
        if: success()
        run: |
          echo -n "Determining next version: "
          next_version=`bin/increment_version.sh -p '${{ steps.release_version.outputs.value }}'`
          echo $next_version
          echo "next_version=${next_version}" >> $GITHUB_OUTPUT
          echo "Configuring git"
          git config --global --add safe.directory /github/workspace
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"
          git fetch
          export target_branch='${{ steps.extract_branch.outputs.value }}'
          echo "Using Target Branch: ${target_branch}"
          git checkout $target_branch
          echo "Setting new snapshot version"
          sed -i "s/^projectVersion.*$/projectVersion\=${next_version}-SNAPSHOT/" gradle.properties
          cat gradle.properties
          echo "Committing and pushing"
          git add gradle.properties
          git commit -m "chore: Bump version to ${next_version}$SNAPSHOT_SUFFIX"
          git push origin $target_branch
  docs:
    needs: [publish, release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: "📥 Checkout the repository"
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '17'
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
      - name: "📜 Generate User Guide Documentation"
        run: ./gradlew docs
      - name: "🚀 Publish to Github Pages"
        if: success()
        uses: grails/github-pages-deploy-action@v2
        env:
          SKIP_SNAPSHOT: ${{ contains(needs.publish.outputs.release_version, 'M') }}
          # if multiple releases are being done, this is the last branch - 1 version
          #SKIP_LATEST: ${{ !startsWith(needs.publish.outputs.target_branch, '6.2') }}
          TARGET_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH: gh-pages
          FOLDER: build/docs
          DOC_FOLDER: gh-pages
          COMMIT_EMAIL: ${{ env.GIT_USER_EMAIL }}
          COMMIT_NAME: ${{ env.GIT_USER_NAME }}
          VERSION: ${{ needs.publish.outputs.release_version }}